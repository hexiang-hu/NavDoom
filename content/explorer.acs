#include "zcommon.acs"

#define TARGET_ID_START 1000 
#define REWARD_ID_SHIFT 1000 
#define REWARD_CHANCE 0.5
#define GOAL_TID 999

global int 0:reward;
global int 1:goal_x;
global int 2:goal_y;
global int 3:goal_z;

int TARGET_ID_END = TARGET_ID_START;
int SPAWN_LOC_ID = 0;
int GOAL_LOC_ID = 0;

function int fdistance (int tid1, int tid2)
{
	int len;
	int y = getactory(tid1) - getactory(tid2);
	int x = getactorx(tid1) - getactorx(tid2);
	int z = getactorz(tid1) - getactorz(tid2);

	int ang = vectorangle(x,y);
	if(((ang+0.125)%0.5) > 0.25) len = fixeddiv(y, sin(ang));
	else len = fixeddiv(x, cos(ang));

	ang = vectorangle(len, z);
	if(((ang+0.125)%0.5) > 0.25) len = fixeddiv(z, sin(ang));
	else len = fixeddiv(len, cos(ang));

	return len;
}

script 1 ENTER
{
	TARGET_ID_END = TARGET_ID_START;
	while(IsTIDUsed(TARGET_ID_END + 1))
	{
		TARGET_ID_END += 1;
	}

	// Spawn actor
	SPAWN_LOC_ID = random(TARGET_ID_START, TARGET_ID_END);
	SetActorPosition(0, GetActorX(SPAWN_LOC_ID), GetActorY(SPAWN_LOC_ID), 0.0, 0);
	SetActorAngle(0,random(0.0,1.0));
	SetActorVelocity(0, 0, 0, 0, FALSE, FALSE);

	// Spawn goals
	if(!IsTIDUsed(GOAL_TID)) {
		GOAL_LOC_ID = SPAWN_LOC_ID;
		until(GOAL_LOC_ID!=SPAWN_LOC_ID) GOAL_LOC_ID = random(TARGET_ID_START, TARGET_ID_END);
    until(SpawnSpot("ShotGun", GOAL_LOC_ID, GOAL_TID));
		
		goal_x = GetActorX(GOAL_LOC_ID);
		goal_y = GetActorY(GOAL_LOC_ID);
		goal_z = GetActorZ(GOAL_LOC_ID);
	}

	// Spawn rewards
	int REWARD_LOC_ID = 0, REWARD_TID = 0;
	for(REWARD_LOC_ID = TARGET_ID_START; REWARD_LOC_ID <= TARGET_ID_END; REWARD_LOC_ID++)
	{
		REWARD_TID = REWARD_LOC_ID + REWARD_ID_SHIFT;
		if(	REWARD_LOC_ID != SPAWN_LOC_ID && 
			REWARD_LOC_ID != GOAL_LOC_ID &&
			random(0.0,1.0) < REWARD_CHANCE)
		{
			until(SpawnSpot("ExplosiveBarrel", REWARD_LOC_ID, REWARD_TID));
		}
	}

	// Wait
	until(fdistance(0, GOAL_TID) < 64.0) 
	{
		for(REWARD_LOC_ID = TARGET_ID_START; REWARD_LOC_ID <= TARGET_ID_END; REWARD_LOC_ID++)
		{
			REWARD_TID = REWARD_LOC_ID + REWARD_ID_SHIFT;

			if(IsTIDUsed(REWARD_TID) && fdistance(0, REWARD_TID) < 64.0)
			{
				Thing_Remove(REWARD_TID);
				reward -= 1.0;
			}
		}

		Delay(1);
	}
	reward += 100.0;

	// Clean up
	for(REWARD_LOC_ID = TARGET_ID_START; REWARD_LOC_ID <= TARGET_ID_END; REWARD_LOC_ID++)
	{
		REWARD_TID = REWARD_LOC_ID + REWARD_ID_SHIFT;

		if(IsTIDUsed(REWARD_TID))
		{
			Thing_Remove(REWARD_TID);
		}
	}

	restart;
	// terminate;
}
